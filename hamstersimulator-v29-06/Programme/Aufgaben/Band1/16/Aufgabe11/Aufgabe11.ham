/*imperative program*/void main() {
    vorBisWand();
    kehr();
    while(vornFrei()) {
        check();
    }
}

void kehr(){
	linksUm();
	linksUm();
}

void vorBisWand(){
	while(vornFrei()){
		vor();
	}
}

int countFloor(){
	int x = 0;
	while(kornDa()) {
		nimm();
		x++;
	}
	for(int i = 0; i < x; i++) {
		gib();
	}
	return x;
	
}

int collectCount() {
    int x = 0;
    while(kornDa()) {
        nimm();
        x++;
    }
    return x;
}

void giveNum(int n) {
    for(int i = 0; i < n; i++) {
        gib();
    }
}

boolean compare() {
    int num1 = countFloor();
    vor();
    int num2 = countFloor();
    kehr();
    vor();
    kehr();
    if(num2 > num1) {
        return true;
    } else {
        return false;
    }   
}

void Switch() {
    int num1 = collectCount();
    vor();
    int num2 = collectCount();
    giveNum(num1);
    kehr();
    vor();
    giveNum(num2);
    vorBisWand();
    kehr();
}

void check() {
    if(compare()) {
        Switch();
    }else {
        vor();
    }
}