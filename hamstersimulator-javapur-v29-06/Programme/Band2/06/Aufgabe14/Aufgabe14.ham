/*object-oriented program*/
GameHamster paul = new GameHamster(0,1,1,1);
GameHamster NW = new GameHamster(1,1,1,0);
GameHamster N = new GameHamster(1,2,1,0);
GameHamster NO = new GameHamster(1,3,1,0);
GameHamster O = new GameHamster(2,3,1,0);
GameHamster SO = new GameHamster(3,3,1,0);
GameHamster S = new GameHamster(3,2,1,0);
GameHamster SW = new GameHamster(3,1,1,0);
GameHamster W = new GameHamster(2,1,1,0);
void main() {
    paul.skript();
}

class GameHamster extends Hamster{

    final static int WIEDERHOLUNGEN = 15;

    final static int MAXRANDOM = 20;

    GameHamster(int r, int s, int b, int k){
        this.init(r, s, b, k);
    }

    void rechtsUm(){
        linksUm();
        linksUm();
        linksUm();
    }

    void skript() {
        for(int i = 0; i < this.WIEDERHOLUNGEN; i++) {
            paul.laufHerum(erzeugeZufallsZahl(MAXRANDOM));
            paul.gib();
            if(rechtsHamsterTer()){
                paul.rechtsUm();
                paul.vor();
            }else{
                paul.rechtsUm();
                paul.vor();
                paul.rechtsUm();
                paul.vor();
            }
            while(paul.getBlickrichtung() != 1) {
                paul.linksUm();
            }
            NearestHamster();
            paul.searchKorn();
            paul.nimm();
            if(!rechtsHamsterTer()) {
                paul.vor();
            }
        }
    }

    void laufHerum(int num){
        for(int i = 0; i < num; i++) {
            if(!rechtsHamsterTer()) {
                rechtsUm();
            }
            vor();
        }
    }

    void searchKorn(){
        vor();
        rechtsUm();
        for(int i = 0; i < 4; i++) {
            if(kornDa()) return;
            vor();
            rechtsUm();
            if(kornDa()) return;
            vor();
        }
    }


    boolean rechtsHamsterTer(){
        int frei = 0;
        if(paul.getBlickrichtung() == 0){
            frei = Territorium.getAnzahlHamster(paul.getReihe(), paul.getSpalte() + 1);
        }else if(paul.getBlickrichtung() == 1) {
            frei = Territorium.getAnzahlHamster(paul.getReihe() + 1, paul.getSpalte());
        }else if(paul.getBlickrichtung() == 2) {
            frei = Territorium.getAnzahlHamster(paul.getReihe(), paul.getSpalte() - 1);
        }else if(paul.getBlickrichtung() == 3) {
            frei = Territorium.getAnzahlHamster(paul.getReihe() - 1, paul.getSpalte());
        }
        return frei != 0;
    }

     int erzeugeZufallsZahl(int max) {
        return (int) (Math.random() * (max + 1));
    }

    void NearestHamster(){
        int[][] cords = {{0,0},{0,1},{0,2},{0,3},{0,4},{1,4},{2,4},{3,4},{4,4},{4,3},{4,2},{4,1},{4,0},{3,0},{2,0},{1,0}};
        for(int i = 0; i < cords.length; i++) {
            if(Territorium.getAnzahlKoerner(cords[i][0],cords[i][1]) == 1){
                GameHamster Ham = paul;
                switch (i) {
                    case 0:
                        paul = NW;
                        NW = Ham;
                        break;
                    case 1:
                        paul = NW;
                        NW = Ham;
                        break;
                    case 2:
                        paul = N;
                        N = Ham;
                        break;
                    case 3:
                        paul = NO;
                        NO = Ham;
                        break;
                    case 4:
                        paul = NO;
                        NO = Ham;
                        break;
                    case 5:
                        paul = NO;
                        NO = Ham;
                        break;
                    case 6:
                        paul = O;
                        O = Ham;
                        break;
                    case 7:
                        paul = SO;
                        SO = Ham;
                        break;
                    case 8:
                        paul = SO;
                        SO = Ham;
                        break;
                    case 9:
                        paul = SO;
                        SO = Ham;
                        break;
                    case 10:
                        paul = S;
                        S = Ham;
                        break;
                    case 11:
                        paul = SW;
                        SW = Ham;
                        break;
                    case 12:
                        paul = SW;
                        SW = Ham;
                        break;
                    case 13:
                        paul = SW;
                        SW = Ham;
                        break;
                    case 14:
                        paul = W;
                        W = Ham;
                        break;
                    case 15:
                        paul = NW;
                        NW = Ham;
                        break;
                    default:
                        break;
                }
            }
        }
    }

}
