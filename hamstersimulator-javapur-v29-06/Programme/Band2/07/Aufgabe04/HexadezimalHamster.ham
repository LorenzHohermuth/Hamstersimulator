/*class*/class HexadezimalHamster extends DezimalHamster {
    // Konstruktor
    HexadezimalHamster(int r, int s, int b, int k) {
        super(r, s, b, k);
    }

    void zeichneA() {
        this.vor();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(4);
        this.rechtsUm();
        this.vor();
        this.vorUndGib(1);
        this.rechtsUm();
        this.vorUndGib(2);
        this.rechtsUm();
        this.vor();
        this.kehr();
        this.gib();
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.vor();
        this.linksUm();
        this.vor();
        this.kehr();
    }

    void zeichneB() {
        this.vorUndGib(2);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.kehr();
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(2);
        this.rechtsUm();
        this.vorUndGib(3);
        this.vor();
        this.linksUm();
        this.vor();
        this.kehr();
    }

    void zeichneC() {
        this.vor();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.vor();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(1);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(3);
        this.vor();
        this.linksUm();
        this.vor();
        this.kehr();
    }

    void zeichneD() {
        this.vorUndGib(2);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(3);
        this.vor();
        this.rechtsUm();
        this.vorUndGib(2);
        this.rechtsUm();
        this.vorUndGib(4);
        this.linksUm();
        this.vor();
        this.kehr();
    }

    void zeichneE() {
        this.vorUndGib(3);
        this.kehr();
        this.vor(3);
        this.linksUm();
        this.vor();
        this.linksUm();
        this.vorUndGib(1);
        this.kehr();
        this.vor(1);
        this.linksUm();
        this.vor();
        this.linksUm();
        this.vorUndGib(3);
        this.kehr();
        this.vor(3);
        this.linksUm();
        this.vor();
        this.linksUm();
        this.vorUndGib(1);
        this.kehr();
        this.vor(1);
        this.linksUm();
        this.vor();
        this.linksUm();
        this.vorUndGib(3);
        this.kehr();
        this.vor(3);
        this.rechtsUm();
        this.vor(4);
        this.rechtsUm();
    }

    void zeichneF() {
        this.vor();
        this.vorUndGib(2);
        this.kehr();
        this.vor(2);
        this.linksUm();
        this.vor(2);
        this.linksUm();
        this.vorUndGib(2);
        this.kehr();
        this.vor(2);
        this.linksUm();
        this.vor(2);
        this.kehr();
        this.gib();
        this.vorUndGib(4);
        this.linksUm();
        this.vor();
        this.kehr();
    }

    // zeichnet die uebergebene Dezimalzahl als Zahl
    // zur Basis 8 aus Koernern
    void zeichne(int dezimalZahl) {
        this.setzeBlickrichtung(Hamster.OST);
        if (dezimalZahl < 16) {
            this.zeichneZiffer(dezimalZahl);
            this.vor(4);
        } else {
            this.zeichne(dezimalZahl / 16); // Rekursion!
            this.zeichneZiffer(dezimalZahl % 16);
            this.vor(4);
        }
    }

    // zeichnet die uebergebene Ziffer aus Koernern
    void zeichneZiffer(int ziffer) {
        super.zeichneZiffer(ziffer); // Aufruf der geerbten
                                     // Methode
        if (ziffer == 10) {
            this.zeichneA();
        } else if (ziffer == 11) {
            this.zeichneB();
        } else if (ziffer == 12) {
            this.zeichneC();
        } else if (ziffer == 13) {
            this.zeichneD();
        } else if (ziffer == 14) {
            this.zeichneE();
        } else if (ziffer == 15) {
            this.zeichneF();
        }
    }
}