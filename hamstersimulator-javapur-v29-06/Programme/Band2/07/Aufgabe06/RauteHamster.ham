/*class*/class RauteHamster extends AllroundHamster {
    // Konstruktor
    RauteHamster(int r, int s, int b, int k) {
        super(r, s, b, k);
    }

    // zeichnet ab der Kachel (r/s) mit Koernern ein Quadrat
    // mit der angegebenen Seitenlaenge;
    // der Hamster tut nichts und liefert false, wenn er
    // nicht genuegend Koerner zum Zeichnen im Maul hat oder
    // ab der angegebenen Kachel nicht mehr genuegend Platz ist
    boolean zeichne(int r, int s, int radius) {
        if (radius <= 0 || !this.genuegendKoernerImMaul(radius)
                || !this.genuegendPlatz(r, s, radius)) {
            return false;
        }

        this.merkenDerStartPosition();
        this.laufeZuKachel(r, s);
        this.setzeBlickrichtung(Hamster.OST);
        this.zeichneWirklich(radius);
        this.geheZurStartPosition();
        return true;
    }

    // Hilfsmethoden

    boolean genuegendKoernerImMaul(int radius) {
        int benoetigteAnzahl = 0;
        benoetigteAnzahl = radius * 4;
        return benoetigteAnzahl <= this.getAnzahlKoerner();
    }

    boolean genuegendPlatz(int r, int s, int radius) {
        return s + radius <= Territorium.getAnzahlSpalten()
                && r + radius <= Territorium.getAnzahlReihen()
                && s - radius >= 0
                && r - radius >= 0;
    }

    int rAlt, sAlt, bAlt;

    void merkenDerStartPosition() {
        this.rAlt = this.getReihe();
        this.sAlt = this.getSpalte();
        this.bAlt = this.getBlickrichtung();
    }

    void geheZurStartPosition() {
        this.laufeZuKachel(this.rAlt, this.sAlt);
        this.setzeBlickrichtung(this.bAlt);
    }

    void zeichneWirklich(int radius) {
        this.vor(radius);
        this.rechtsUm();
        if (radius > 0) {
            this.Treppen(radius);
            this.rechtsUm();
            this.Treppen(radius);
            this.rechtsUm();
            this.Treppen(radius);
            this.rechtsUm();
            this.Treppen(radius);
        }
    }

    void Treppen(int anzahl) {
        while (anzahl > 0) {
            this.vor();
            this.rechtsUm();
            this.vor();
            this.linksUm();
            this.gib();
            anzahl = anzahl - 1;
        }
    }
}