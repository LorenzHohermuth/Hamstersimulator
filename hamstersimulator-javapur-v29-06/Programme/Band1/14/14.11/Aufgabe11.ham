/*imperative program*/char richtung = 'o';
int x = 0;
int y = 0;

int most = 0;
int xmost = x;
int ymost = y;

boolean links = false;
boolean loop = true;

//	y
//	^
//	|
//	|
//	|
//	|
//	+----------> x

void main() {
    while(loop) {
    	row();
    	turn();
    }
    schreib(Integer.toString(most) + " (" + Integer.toString(xmost) + "/" + Integer.toString(ymost) + ")");
    nkehr();
    corner();
    nkehr();
    findField();
    while(kornDa()){
    	nimm();
    }
}

void nrechtsUm(){
	nlinksUm();
	nlinksUm();
	nlinksUm();
}

void nkehr(){
	nlinksUm();
	nlinksUm();
}
void nlinksUm(){
	linksUm();
	if(richtung == 'o'){
		richtung = 'n'; 
	}else if(richtung == 'n'){
		richtung = 'w'; 
	}else if(richtung == 'w'){
		richtung = 's';
	}else if(richtung == 's'){
		richtung = 'o';
	}
}

void nvor(){
	vor();
	if(richtung == 'o'){
		x++; 
	}else if(richtung == 'n'){
		y++; 
	}else if(richtung == 'w'){
		x--;
	}else if(richtung == 's'){
		y--;
	}
}

void vorBisWand(){
	while(vornFrei()){
		nvor();
	}
}

void corner(){
	vorBisWand();
	nlinksUm();
	vorBisWand();
}

int count() {
	int x = 0;
	while(kornDa()){
		nimm();
		x++;
	}
	while(!maulLeer()) {
		gib();
	}
	return x;
}

void row() {
	while(vornFrei()) {
		compare();
		nvor();
	}
	compare();
}

void compare() {
	int num = count();
	if(num > most) {
		most = num;
		xmost = x;
		ymost = y;
	}
}

void turn() {
	if (links) {
		nlinksUm();
		if(vornFrei()) {
			nvor();
			nlinksUm();
		}else loop = false;
	}else if(!links) {
		nrechtsUm();
		if(vornFrei()) {
			nvor();
			nrechtsUm();
		}else loop = false;
	}
	links = !links;
}

void findField(){
	while(xmost > x){
		nvor();
	}
	nrechtsUm();
	while(ymost < y){
		nvor();
	}
}