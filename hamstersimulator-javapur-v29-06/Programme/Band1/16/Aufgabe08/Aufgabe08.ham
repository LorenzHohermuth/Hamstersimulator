/*imperative program*/void main() {
	//ausrechnen
	linksUm();
	int y = howLong();
	rechtsUm();
	int x = howLong();
	//in Mitte
	kehr();
	vaz(half(x));
	linksUm();
	int koerner = countMouth();
	int side = howBig(koerner, x, y);
	rahmen(side);
	roof(side);
}

//bewegung

void vorBisWand(){
	while(vornFrei()){
		vor();
	}
}

void rechtsUm(){
	linksUm();
    linksUm();
    linksUm();
}

void kehr(){
	linksUm();
	linksUm();
}

int countMouth(){
	int x = 0;
	while(!maulLeer()) {
		gib();
		x++;
	}
	for(int i = 0; i < x; i++) {
		nimm();
	}
	return x;	
}

void vaz(int n){
	for(int i = 0; i < n; i++){
	vor();
	}
}

void gvaz(int n){
	for(int i = 0; i < n; i++){
	vor();
	gib();
	}
}

void treppen(int anzahl) {
	for(int i = 0; i < anzahl; i++) {
		vor();
		linksUm();
		vor();
		rechtsUm();
		gib();
	}
}

//rechnen

int howLong() {
	int x = 1;
	while(vornFrei()) {
		vor();
		x++;
	}
	return x;
}

int half(int i) {
	return (i - 1) / 2; 
}

int howBig(int koerner, int x, int y) {
	int cornToUse = 0;
	int side = 1;
	int roof = 1;
	int height = y;
	int width = x;
	while(koerner > cornToUse && (side + 2) < width && (side + 2 + roof) < height) {
		cornToUse = side * 5 + 4;
		side += 2;
		roof++;
	}
	if(koerner > cornToUse) {
		side -= 2;
	}
	return side;
}

//teill√∂sungen

void rahmen(int side) {
	vorBisWand();
	linksUm();
	vaz(half(side) + 1);
	for(int i = 0; i < 4; i++) {
		linksUm();
		gvaz(side + 1);
	}
	linksUm();
	vaz(side + 1);
}

void roof(int side) {
	treppen(half(side) + 1);
	linksUm();
	treppen(half(side));
}