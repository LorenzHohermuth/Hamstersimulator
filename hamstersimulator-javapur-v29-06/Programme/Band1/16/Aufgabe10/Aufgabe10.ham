/*imperative program*/int x = 0;
int y = 0;

/*imperative program*/void main() {
    inEcke();
    int side = vorBisWandScan();
    kehr();
    turnAll(90, side);
}

//bewegung

void rechtsUm(){
	linksUm();
    linksUm();
    linksUm();
}

void kehr(){
	linksUm();
	linksUm();
}

void vorBisWand(){
	while(vornFrei()){
		vor();
	}
}

int vorBisWandScan(){
    int side = 1;
	while(vornFrei()){
		vor();
        side++;
	}
    return side;
}
//teilprobleme

int[][] scan(int side){
    int[][] matrix = new int[side][side];
    
    for(int i = 0; i < side; i++) {
        if (kornDa()) {
            matrix[x][y] = 1;
            nimm();
        }else {
            matrix[x][y] = 0;
        }
        while(vornFrei()) {
            vor();
            x++;
            if (kornDa()) {
                matrix[x][y] = 1;
                nimm();
            }else {
                matrix[x][y] = 0;
            }
        }
        newRow();
    }
    rechtsUm();
    vorBisWand();
    linksUm();
    return matrix;
}



int[][] turn90(int[][] matrix, int side) {
    int[][] newMatrix = new int[side][side];
    int xmat = 0;
    int ymat = 0;
    for(int i = 0; i < side; i++) {
        for(int i2 = 0; i2 < side; i2++) {
            int[] cordNew = newValues90(xmat, ymat);
            newMatrix[xmat][ymat] = matrix[cordNew[0]][cordNew[1]]; 
            xmat++;
        }
        ymat++;
        xmat = 0;
    }
    return newMatrix;
}

void inEcke(){
	vorBisWand();
	rechtsUm();
	vorBisWand();
	rechtsUm();
}

void newRow() {
    kehr();
    vorBisWand();
    rechtsUm();
    if(vornFrei()) {
        vor();
    }
    rechtsUm();
    x = 0;
    y++;
}

int[] newValues90(int x, int y) {
        int[] cord = new int[2];
        cord[0] = y;
        cord[1] = 5 - x;
        return cord;
}


String MatrixToString(int[][] matrix, int side) {
    String text = " ";
    int xmat = 0;
    int ymat = 0;
    for(int i = 0; i < side; i++) {
        for(int i2 = 0; i2 < side; i2++) {
            text = text + " | " + matrix[xmat][ymat];
            xmat++;
        }
        text = text + "\n ";
        xmat = 0;
        ymat += 1;
    }
    return text;
}

void give(int[][] mat, int side) {
    int xmat = 0;
    int ymat = 0;
    for(int i = 0; i < side; i++) {
        if(mat[xmat][ymat] == 1) {
            gib();
        }
        while(vornFrei()) {
            vor();
            xmat++;
            if(mat[xmat][ymat] == 1) {
                gib();
            }
        }
        newRow();
        ymat++;
        xmat = 0;
    }
    rechtsUm();
    vorBisWand();
    linksUm();
}





void turnAll(int angle, int side) {
    for(int i = 0; i < angle /90; i++) {
        y = 0;
        x = 0;
        int[][] mat = scan(side);
        schreib(MatrixToString(mat, side));
        int[][] newMat = turn90(mat, side);
        schreib(MatrixToString(newMat, side));
        give(newMat, side);
    }
}