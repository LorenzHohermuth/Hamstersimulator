/*class*/class RechteckHamster extends QuadratHamster {
    // Konstruktor
    RechteckHamster(int r, int s, int b, int k) {
        super(r, s, b, k);
    }

    RechteckHamster(int r, int s){
        super(r, s, 1, 100000);
    }

    // zeichnet ab der Kachel (r/s) mit Koernern ein Quadrat
    // mit der angegebenen Seitenlaenge;
    // der Hamster tut nichts und liefert false, wenn er
    // nicht genuegend Koerner zum Zeichnen im Maul hat oder
    // ab der angegebenen Kachel nicht mehr genuegend Platz ist
    boolean zeichne(int r, int s, int laenge, int breite) {
        if (laenge <= 0 || !this.genuegendKoernerImMaul(laenge, breite)
                || !this.genuegendPlatz(r, s, laenge, breite)) {
            return false;
        }

        this.merkenDerStartPosition();
        this.laufeZuKachel(r, s);
        this.setzeBlickrichtung(Hamster.OST);
        this.zeichneWirklich(laenge ,breite);
        this.geheZurStartPosition();
        return true;
    }

    // Hilfsmethoden

    boolean genuegendKoernerImMaul(int laenge, int breite) {
        int benoetigteAnzahl = 0;
        if(laenge == 0 || breite == 0){
            benoetigteAnzahl = laenge * breite;
        } else {
            int rechteckAussen = laenge * breite;
            int rechteckInnen = (laenge - 2) * (breite - 2);
            benoetigteAnzahl = rechteckAussen - rechteckInnen;
        }
        return benoetigteAnzahl <= this.getAnzahlKoerner();
    }

    boolean genuegendPlatz(int r, int s, int laenge, int breite) {
        return s + laenge <= Territorium.getAnzahlSpalten()
                && r + breite <= Territorium.getAnzahlReihen();
    }

    int rAlt, sAlt, bAlt;

    void merkenDerStartPosition() {
        this.rAlt = this.getReihe();
        this.sAlt = this.getSpalte();
        this.bAlt = this.getBlickrichtung();
    }

    void geheZurStartPosition() {
        this.laufeZuKachel(this.rAlt, this.sAlt);
        this.setzeBlickrichtung(this.bAlt);
    }

    void zeichneWirklich(int laenge, int breite) {
        if(!this.kornDa())this.gib();
        if (laenge > 1) {
            this.vorUndGib(laenge - 1);
            this.rechtsUm();
            this.vorUndGib(breite - 1);
            this.rechtsUm();
            this.vorUndGib(laenge - 1);
            this.rechtsUm();
            this.vorUndGib(breite - 2);
            this.vor();
            this.rechtsUm();
        }
    }

    void vorUndGib(int anzahl) {
        while (anzahl > 0) {
            this.vor();
            if(!this.kornDa())this.gib();
            anzahl = anzahl - 1;
        }
    }
}