/*object-oriented program*/
Hamster paul = Hamster.getStandardHamster();
ChaseHamster hans = new ChaseHamster(1,1,1,0);
ChaseHamster nord = new ChaseHamster(hans.getReihe() - 1,hans.getSpalte(),1,0);
ChaseHamster east = new ChaseHamster(hans.getReihe(),hans.getSpalte() + 1,1,0);
ChaseHamster south = new ChaseHamster(hans.getReihe() + 1,hans.getSpalte(),1,0);
ChaseHamster west = new ChaseHamster(hans.getReihe(),hans.getSpalte() - 1,1,0);
void main() {
    while(paul.getReihe() != hans.getReihe() || paul.getSpalte() != hans.getSpalte()) {
    laufRand();
    hans.chase(paul);
    hans.chase(paul);
}
}

int erzeugeZufallsZahl(int max) {
    return (int) (Math.random() * (max + 1));
}

void laufRand() {
    int randNum = erzeugeZufallsZahl(3);
    switch (randNum) {
        case 1:
            paul.linksUm();
            break;
        case 2:
            paul.linksUm();
            paul.linksUm();
            break;
        case 3:
            paul.linksUm();
            paul.linksUm();
            paul.linksUm();
            break;
        default:
            break;
    }
    if(paul.vornFrei())paul.vor();

}

class ChaseHamster extends Hamster{
    ChaseHamster(int r, int s, int b, int k){
        this.init(r, s, b, k);
    }

    void allVor(){
        nord.vor();
        east.vor();
        south.vor();
        west.vor();
        this.vor();
    }

    void allLinksUm(){
        nord.linksUm();
        east.linksUm();
        south.linksUm();
        west.linksUm();
        this.linksUm();
    }

    boolean allVornFrei(){
        return nord.vornFrei() && east.vornFrei() && south.vornFrei() && west.vornFrei();
    }

    void chase(Hamster ham) {
        if(this.getSpalte() < ham.getSpalte()){
            while(this.getBlickrichtung() != 1) {
                allLinksUm();
            }
        }else if(this.getSpalte() > ham.getSpalte()){
            while(this.getBlickrichtung() != 3) {
                allLinksUm();
            }
        }else if(this.getReihe() < ham.getReihe()){
            while(this.getBlickrichtung() != 2) {
                allLinksUm();
            }
        }else if(this.getReihe() > ham.getReihe()){
            while(this.getBlickrichtung() != 0) {
                allLinksUm();
            }
        }
        if(allVornFrei()) {
            allVor();
        }
    }
}
