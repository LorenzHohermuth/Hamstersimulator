/*class*/// realisiert die NGewinnt-Regeln
class RegelHamster extends Hamster {

    // Groesse des Spielfeldes
    final static int FELD_GROESSE = 7;

    // wie viele Scheiben in Reihe, Spalte oder Diagonale
    final static int N_GEWINNT = 4;

    int sieger = 0;

    RegelHamster() {
        this.init(RegelHamster.FELD_GROESSE - 1, 0, Hamster.OST,
                0);
    }

    boolean spielEnde() {
        // der Regelhamster ist zu faul, das Feld abzulaufen und
        // die Koerner zu zaehlen; stattdessen nutzt er die
        // Moeglichkeiten der Klasse Territorium

        // Ueberpruefung der Zeilen
        int zeile = 0;
        while (zeile < RegelHamster.FELD_GROESSE) {
            int spalte = 0;
            while (spalte <= RegelHamster.FELD_GROESSE
                    - RegelHamster.N_GEWINNT) {
                if (Territorium.getAnzahlKoerner(zeile, spalte) == NGewinntHamster.ROT) {
                    if (won(zeile, spalte,
                            NGewinntHamster.ROT)) {
                        this.sieger = NGewinntHamster.ROT;
                        return true;
                    }
                } else if (Territorium.getAnzahlKoerner(zeile,
                        spalte) == NGewinntHamster.GELB) {
                    if (won(zeile, spalte,
                            NGewinntHamster.GELB)) {
                        this.sieger = NGewinntHamster.GELB;
                        return true;
                    }
                }
                spalte = spalte + 1;
            }
            zeile = zeile + 1;
        }

        // Ueberpruefung der Spalten:
        // siehe Aufgabe 3
		// zeile = Territorium.getAnzahlReihen() - N_GEWINNT;
        // int startZeile = zeile;
		// for(int i = 0; i < Territorium.getAnzahlSpalten(); i++) {
        //     int count = 0;
        //     int refrence = Territorium.getAnzahlKoerner(startZeile, i);
        //     while(startZeile == Territorium.getAnzahlKoerner(zeile + 1, i)){
        //         zeile++;
        //     }
        //     for(int j = 0; j < 4; j++) {
        //         if(Territorium.getAnzahlKoerner(zeile, i) == refrence){
        //             count++;
        //         }
        //         zeile--;
        //     }
        // }
        // Ueberpruefung der Diagonalen
        // siehe Aufgabe 3

        // Feld voll und kein Sieger?
        zeile = 0;
        while (zeile < RegelHamster.FELD_GROESSE) {
            int spalte = 0;
            while (spalte < RegelHamster.FELD_GROESSE) {
                if (Territorium.getAnzahlKoerner(zeile, spalte) == 0) {
                    return false;
                }
                spalte = spalte + 1;
            }
            zeile = zeile + 1;
        }
        return true;
    }

    int ermittleSieger() {
        return sieger;
    }

    // ueberprueft, ob sich N_GEWINNT gleiche Scheiben in einer
    // Reihe befinden, und zwar ab Kachel (zeile/spalte)
    boolean nInZeile(int zeile, int spalte, int anzahl) {
        int i = 1;
        while (i < RegelHamster.N_GEWINNT) {
            if (Territorium.getAnzahlKoerner(zeile, spalte + i) != anzahl) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
    
    boolean nInSpalte(int zeile, int spalte, int anzahl) {
        int i = 1;
        while (i < RegelHamster.N_GEWINNT) {
            if (Territorium.getAnzahlKoerner(zeile + i, spalte) != anzahl) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }
    
    boolean nInDiagonal(int zeile, int spalte, int anzahl) {
        int i = 1;
        while (i < RegelHamster.N_GEWINNT) {
            if (Territorium.getAnzahlKoerner(zeile + i, spalte + i) != anzahl) {
                return false;
            }
            i = i + 1;
        }
        return true;
    }

    boolean won(int zeile, int spalte, int anzahl) {
        return nInZeile(zeile, spalte, anzahl) || nInSpalte(zeile, spalte, anzahl) || nInDiagonal(zeile, spalte, anzahl);
    }
}