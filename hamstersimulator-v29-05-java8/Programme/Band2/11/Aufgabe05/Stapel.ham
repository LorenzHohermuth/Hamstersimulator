/*class*/class Stapel extends Object{

    Object[] speicher; // Speicher

    int oberstesElement; // Index auf oberstes Element

    int maxGroesse = 0;

    Stapel(int value) {
        maxGroesse = value;
        this.speicher = new Object[maxGroesse];
        this.oberstesElement = -1;
    }

    Stapel(int value, Object[] save, int elem){
        maxGroesse = value;
        speicher = save;
        oberstesElement = elem;
        this.speicher = new Object[maxGroesse];
        this.oberstesElement = -1;
    }

    // legt pos oben auf dem Stapel ab
    void drauflegen(Object pos) {
        if (!this.istVoll()) {
            this.oberstesElement = this.oberstesElement + 1;
            this.speicher[this.oberstesElement] = pos;
        }
    }

    // entfernt das oberste Element des Stapels und liefert es
    // als Wert zurueck
    Object herunternehmen() {
        if (!this.istLeer()) {
            Object ergebnis = this.speicher[this.oberstesElement];
            this.oberstesElement = this.oberstesElement - 1;
            return ergebnis;
        } else {
            return null;
        }
    }

    Object[] getSpeicher(){
        return speicher;
    }

    // ueberprueft, ob der Stapel voll ist
    boolean istVoll() {
        return this.oberstesElement == this.speicher.length - 1;
    }

    // ueberprueft, ob der Stapel leer ist
    boolean istLeer() {
        return this.oberstesElement == -1;
    }

    @Override
    public Object clone(){
        Object newStapel = new Stapel(maxGroesse, speicher, oberstesElement);
        return newStapel;
    }

    boolean equals(Object a, Object b){
        return a == b;
    }

    @Override
    public int hashCode(){
        return maxGroesse;
    }

    @Override
    public String toString(){
        String out = "";
        for(int i = speicher.length - 1; i >= 0; i--) {
            out += speicher[i].toString() + ",";
        }
        return out;
    }
}