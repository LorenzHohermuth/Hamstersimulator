/*class*/
class GameHamster extends AllroundHamster{

    int maxRanZahl = 20;

    AllroundHamster paul;
    AllroundHamster[] circle = new AllroundHamster[8];

    int[] cords = new int[2];

    GameHamster(Hamster Ham){
        super(Ham.getReihe(), Ham.getSpalte(), Ham.getBlickrichtung(), Ham.getAnzahlKoerner());
    }

    void spawn(){
        paul = new AllroundHamster(0,1,1,1);
        circle[0] = new AllroundHamster(1,1,1,0);
        circle[1] = new AllroundHamster(1,2,1,0);
        circle[2] = new AllroundHamster(1,3,1,0);
        circle[3] = new AllroundHamster(2,3,1,0);
        circle[4] = new AllroundHamster(3,3,1,0);
        circle[5] = new AllroundHamster(3,2,1,0);
        circle[6] = new AllroundHamster(3,1,1,0);
        circle[7] = new AllroundHamster(2,1,1,0);
    }

    void exe(){
        for(int i = 0; i < 15; i++) {
            laufeRandZahl();
            findCorn();
        }
    }

    int erzeugeZufallsZahl() {
        return (int) (Math.random() * (maxRanZahl + 1));
    }

    void laufeRandZahl(){
        for(int i = 0; i < erzeugeZufallsZahl(); i++) {
            if(rechtsHamster()) {
                paul.vor();
            }else{
                paul.rechtsUm();
                paul.vor();
            }
        }
        paul.gib();
        cords[0] = paul.getReihe();
        cords[1] = paul.getSpalte();
    }

    void findCorn(){
        int paulReihe = paul.getReihe();
        int paulSpalte = paul.getSpalte();
        int paulBlickrichtung = paul.getBlickrichtung();
        int circleNum = 0;
        if(cords[0] <= 1 && cords[1] <= 1) {
            circleNum = 0;
        }else if(cords[0] == 0 && cords[1] == 2) {
            circleNum = 1;
        }else if(cords[0] <= 1 && cords[1] >= 3) {
            circleNum = 2;
        }else if(cords[0] == 2 && cords[1] == 4) {
            circleNum = 3;
        }else if(cords[0] >= 3 && cords[1] >= 3) {
            circleNum = 4;
        }else if(cords[0] == 4 && cords[1] == 2) {
            circleNum = 5;
        }else if(cords[0] >= 3 && cords[1] <= 1) {
            circleNum = 6;
        }else if(cords[0] == 2 && cords[1] == 0) {
            circleNum = 7;
        }
        int circleReihe = circle[circleNum].getReihe();
        int circleSpalte = circle[circleNum].getSpalte();
        paul.laufeZuKachel(circleReihe, circleSpalte);
        paul.setzeBlickrichtung(1);
        circle[circleNum].laufeZuKachel(paulReihe, paulSpalte);
        circle[circleNum].setzeBlickrichtung(paulBlickrichtung);
        circle[circleNum].nimm();
        AllroundHamster zwischenAblage = paul;
        paul = circle[circleNum];
        circle[circleNum] = zwischenAblage;
    }

    boolean rechtsHamster(){
        int reihe = paul.getReihe();
        int spalte = paul.getSpalte();
        int blickrichtung = paul.getBlickrichtung();
        if(blickrichtung == 1) {
            boolean out = Territorium.getAnzahlHamster(reihe + 1, spalte) == 1;
            return out;
        }else if(blickrichtung == 2) {
            boolean out = Territorium.getAnzahlHamster(reihe, spalte - 1) == 1;
            return out;
        }else if(blickrichtung == 3) {
            boolean out = Territorium.getAnzahlHamster(reihe - 1, spalte) == 1;
            return out;
        }else if(blickrichtung == 0) {
            boolean out = Territorium.getAnzahlHamster(reihe, spalte + 1) == 1;
            return out;
        }
        return false;
    }
}
