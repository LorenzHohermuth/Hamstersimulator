/*imperative program*/
boolean fin = false;
void main() {
    loesen();
    kehr();
}

void rechtsUm() {
    linksUm();
    linksUm();
    linksUm();
}

void kehr() {
     linksUm();
     linksUm();
}

void loesen() {
    if(vornFrei()) {
        vor();
        loesen();
        vor();
    }else if(!vornFrei() && !rechtsFrei()) {
        linksUm();
        search();
        kehr();
    }else if(!vornFrei()){
        linksUm();
        loesen();
        rechtsUm();
    }
}

void search() {
    row();
    if(rechtsFrei() && !fin) {
        rechtsUm();
        vor();
        rechtsUm();
        search();
        vor();
    }
    else {
        linksUm();
    }
}

void row() {
    if(kornDa()) {
        nimm();
        fin = true;
        kehr();
        return;
    }
    if(vornFrei()) {
        vor();
        row();
        vor();
    }
    else if(!vornFrei()) {
        kehr();
    }
}

boolean  rechtsFrei() {
    rechtsUm();
    boolean x = vornFrei();
    linksUm();
    return x;
}